
import java.util.Scanner;

public class Main {
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            next = null;
        }
    }
    static class LinkedList {
        Node head;

        LinkedList() {
            head = null;
        }
        void Merge(LinkedList list1, LinkedList list2) {
            Node n1 = list1.head;
            Node n2 = list2.head;
            Node merg = null;
            Node tail = null;

            while (n1 != null && n2 != null) {
                if (n1.data <= n2.data) {
                    if (merg == null) {
                        merg = n1;
                        tail = n1;
                    } else {
                        tail.next = n1;
                        tail = tail.next;
                    }
                    n1 = n1.next;
                } else {
                    if (merg == null) {
                        merg = n2;
                        tail = n2;
                    } else {
                        tail.next = n2;
                        tail = tail.next;
                    }
                    n2 = n2.next;
                }
            }

            if (n1 != null) {
                tail.next = n1;
            } else {
                tail.next = n2;
            }

            this.head = merg;
        }

        // Method to perform merge sort on the linked list
        Node mergeSort(Node head) {
            if (head == null || head.next == null) {
                return head;
            }

            Node middle = sun(head);
            Node nextOfMiddle = middle.next;
            middle.next = null;

            Node left = mergeSort(head);
            Node right = mergeSort(nextOfMiddle);

            return mergeSortedLists(left, right);
        }

        Node sun(Node head) {
            Node sP = head;
            Node fP = head;

            while (fP.next != null && fP.next.next != null) {
                sP = sP.next;
                fP = fP.next.next;
            }

            return sP;
        }

        Node mergeSortedLists(Node a, Node b) {
            Node result = null;

            if (a == null) {
                return b;
            }
            if (b == null) {
                return a;
            }

            if (a.data <= b.data) {
                result = a;
                result.next = mergeSortedLists(a.next, b);
            } else {
                result = b;
                result.next = mergeSortedLists(a, b.next);
            }

            return result;
        }
        void display() {
            Node current = head;
            while (current != null) {
                System.out.print(current.data + "->");
                current = current.next;
            }
            System.out.print("null");
        }
    }
    static LinkedList createLinkedList() {
        LinkedList list = new LinkedList();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter elements in the linked list: ");
        int n = scanner.nextInt();

        System.out.print("Enter the elements separated by spaces: ");
        for (int i = 0; i < n; i++) {
            int data = scanner.nextInt();
            Node newNode = new Node(data);
            if (list.head == null) {
                list.head = newNode;
            } else {
                Node current = list.head;
                while (current.next != null) {
                    current = current.next;
                }
                current.next = newNode;
            }
        }

        return list;
    }

    public static void main(String[] args) {
        LinkedList list1 = createLinkedList();
        LinkedList list2 = createLinkedList();

        LinkedList mergedList = new LinkedList();
        mergedList.Merge(list1, list2);

        // Performing merge sort on the merged list
        mergedList.head = mergedList.mergeSort(mergedList.head);

        System.out.print("Output: ");
        mergedList.display();
    }
}
